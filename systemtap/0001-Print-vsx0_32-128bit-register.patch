diff --git a/runtime/linux/regs.c b/runtime/linux/regs.c
index 6573967..654ee1a 100644
--- a/runtime/linux/regs.c
+++ b/runtime/linux/regs.c
@@ -163,7 +163,65 @@ static void _stp_print_regs(struct pt_regs * regs)
 static void _stp_print_regs(struct pt_regs * regs)
 {
 	int i;
-
+        uint64_t msr;
+        uint64_t msr_saved;
+        uint64_t high_chunk; // GPRx
+        uint64_t low_chunk;  // GPRy
+
+        uint64_t vsx0_high_chunk; // GPRx
+        uint64_t vsx0_low_chunk;  // GPRy
+
+
+
+__asm__(
+       "mfmsr %[msr];"
+       : [msr] "=r" (msr)
+       :
+       :
+       );
+
+       msr_saved = msr;
+       msr = msr + 0x2802000; // set MSR_FP + MSR_VEC | MSR_VSX to avoid interruptions
+
+__asm__ __volatile__ (
+       "mtmsr %[msr];"
+       "isync       ;" // take effect
+       :
+       : [msr] "r" (msr)
+       :
+       );
+
+__asm__(
+
+     "mfvsrd %[vsx0_high_chunk], 0;"
+     "xxsldwi 3, 0, 0, 2;"
+     "mfvsrd %[vsx0_low_chunk], 3;"
+
+     "mfvsrd %[high_chunk], 32;"
+     "xxsldwi 3, 32, 32, 2;"
+     "mfvsrd %[low_chunk], 3  ;"
+
+     :    [high_chunk] "=r"(high_chunk),
+          [low_chunk]  "=r"(low_chunk),
+          [vsx0_high_chunk] "=r"(vsx0_high_chunk),
+          [vsx0_low_chunk]  "=r"(vsx0_low_chunk)
+     :
+     : "vs3", "vs0", "vs32"
+     );
+
+__asm__ __volatile__ (
+        "mtmsr %[msr_saved];"
+        "isync;             "
+        :
+        : [msr_saved] "r" (msr_saved)
+        :
+      );
+
+
+        _stp_printf("vsx0=0x%016lx%016lx ", vsx0_high_chunk, vsx0_low_chunk);
+        _stp_printf("vsx32=0x%016lx%016lx ", high_chunk, low_chunk);
+//      _stp_printf("LOW_CHUNK:   %.16lx\n", low_chunk);
+/*
 	_stp_printf("NIP: %016lX XER: %08X LR: %016lX CTR: %016lX\n",
 	       regs->nip, (unsigned int)regs->xer, regs->link, regs->ctr);
 	_stp_printf("REGS: %016lx TRAP: %04lx\n", (long)regs, regs->trap);
@@ -171,11 +229,11 @@ static void _stp_print_regs(struct pt_regs * regs)
 			regs->msr, (unsigned int)regs->ccr);
 	_stp_printf("DAR: %016lx DSISR: %016lx\n",
 		       	regs->dar, regs->dsisr);
-
+*/
 #ifdef CONFIG_SMP
-	_stp_printf(" CPU: %d", smp_processor_id());
+//	_stp_printf(" CPU: %d", smp_processor_id());
 #endif /* CONFIG_SMP */
-
+/*
 	for (i = 0; i < 32; i++) {
 		if ((i % 4) == 0) {
 			_stp_printf("\n GPR%02d: ", i);
@@ -187,6 +245,7 @@ static void _stp_print_regs(struct pt_regs * regs)
 	}
 	_stp_printf("\nNIP [%016lx] ", regs->nip);
 	_stp_printf("LR [%016lx]\n", regs->link);
+*/
 }
 
 #elif defined (__aarch64__)
